@page "/holdings/{Id:guid}/delete"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using NetworthApplication.Holdings

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Edit</h1>
<h3>Account</h3>
<hr />
@if (_holding == null)  
{  
    <p><em>Loading...</em></p>  
}
else
{
    <div class="row">
        <div class="col-md-4">
            <table class="table">    
                <tr>    
                    <td>Ticker</td>    
                    <td>@_holding.Ticker</td>    
                </tr>    
                <tr>    
                    <td>Shares Number</td>    
                    <td>@_holding.Shares</td>    
                </tr>
            </table>  
            <div class="form-group">
                <button class="btn btn-default" @onclick="@DeleteHoldingTask">Delete</button>
                <button class="btn" @onclick="@Cancel">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    private HoldingVm _holding = new HoldingVm();

    protected override async Task OnInitializedAsync()
    {
        _holding = await Http.GetFromJsonAsync<HoldingVm>($"holdings/{Id}");
    }

    protected async Task DeleteHoldingTask()
    {
        try
        {
            await Http.DeleteAsync($"holdings/{Id}");
            NavigationManager.NavigateTo("./holdings");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("./holdings");
    }
}  